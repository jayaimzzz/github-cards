{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","user","followers","active","handleClick","_callee","event","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","followers_url","_this","setState","stop","this","react_default","createElement","className","index_es","onClick","color","variant","src","avatar_url","key","id","name","location","bio","map","follower","alt","login","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTA8DeA,6MAzDbC,MAAQ,CACNC,KAAM,GACNC,UAAW,GACXC,QAAQ,KAGVC,kDAAc,SAAAC,EAAMC,GAAN,IAAAL,EAAAC,EAAA,OAAAK,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACKC,MAAM,0CADX,cACRZ,EADQS,EAAAI,KAAAJ,EAAAE,KAAA,EAECX,EAAKc,OAFN,cAEZd,EAFYS,EAAAI,KAAAJ,EAAAE,KAAA,EAGUC,MAAMZ,EAAKe,eAHrB,cAGRd,EAHQQ,EAAAI,KAAAJ,EAAAE,KAAA,GAIMV,EAAUa,OAJhB,QAIZb,EAJYQ,EAAAI,KAKZG,EAAKC,SAAS,SAAAlB,GAAK,MAAK,CACtBC,KAAMA,EACNC,UAAWA,EACXC,QAASH,EAAMG,UARL,yBAAAO,EAAAS,SAAAd,EAAAe,uIAaZ,OACEC,EAAAb,EAAAc,cAAA,OAAKC,UAAU,OACbF,EAAAb,EAAAc,cAACE,EAAA,EAAD,CAAQC,QAASL,KAAKhB,YAAasB,MAAM,UAAUC,QAAQ,aAA3D,eAGCP,KAAKpB,MAAMG,QACVkB,EAAAb,EAAAc,cAACE,EAAA,EAAD,CAAMD,UAAU,QACdF,EAAAb,EAAAc,cAAA,OACEC,UAAU,aACVK,IAAKR,KAAKpB,MAAMC,KAAK4B,WACrBC,IAAKV,KAAKpB,MAAMC,KAAK8B,KAEvBV,EAAAb,EAAAc,cAAA,WACAD,EAAAb,EAAAc,cAAA,YAAOF,KAAKpB,MAAMC,KAAK+B,MACvBX,EAAAb,EAAAc,cAAA,WACAD,EAAAb,EAAAc,cAAA,YAAOF,KAAKpB,MAAMC,KAAKgC,UACvBZ,EAAAb,EAAAc,cAAA,WACAD,EAAAb,EAAAc,cAAA,YAAOF,KAAKpB,MAAMC,KAAKiC,KACvBb,EAAAb,EAAAc,cAAA,uBACAD,EAAAb,EAAAc,cAAA,OAAKS,GAAG,YAAYR,UAAU,aAC3BH,KAAKpB,MAAME,UAAUiC,IAAI,SAAAC,GAAQ,OAChCf,EAAAb,EAAAc,cAACE,EAAA,EAAD,KACEH,EAAAb,EAAAc,cAACE,EAAA,EAAD,CACEI,IAAKQ,EAASP,WACdC,IAAKM,EAASL,GACdM,IAAKD,EAASJ,OAEhBX,EAAAb,EAAAc,cAAA,KAAGC,UAAU,iBAAiBa,EAASE,oBA/CvCC,aCQEC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAb,EAAAc,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0fda6905.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Avatar, CardMedia, Card, Typography } from \"@material-ui/core\";\n\nclass App extends Component {\n  state = {\n    user: {},\n    followers: {},\n    active: false\n  };\n\n  handleClick = async event => {\n    let user = await fetch(\"https://api.github.com/users/jayaimzzz\");\n    user = await user.json();\n    let followers = await fetch(user.followers_url);\n    followers = await followers.json();\n    this.setState(state => ({\n      user: user,\n      followers: followers,\n      active: !state.active\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Button onClick={this.handleClick} color=\"primary\" variant=\"contained\">\n          Toggle User\n        </Button>\n        {this.state.active && (\n          <Card className=\"card\">\n            <img\n              className=\"profilePic\"\n              src={this.state.user.avatar_url}\n              key={this.state.user.id}\n            />\n            <br />\n            <span>{this.state.user.name}</span>\n            <br />\n            <span>{this.state.user.location}</span>\n            <br />\n            <span>{this.state.user.bio}</span>\n            <h3>Followers</h3>\n            <div id=\"followers\" className=\"followers\">\n              {this.state.followers.map(follower => (\n                <CardMedia>\n                  <Avatar\n                    src={follower.avatar_url}\n                    key={follower.id}\n                    alt={follower.name}\n                  />\n                  <p className=\"followerLogin\">{follower.login}</p>\n                </CardMedia>\n              ))}\n            </div>\n          </Card>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}